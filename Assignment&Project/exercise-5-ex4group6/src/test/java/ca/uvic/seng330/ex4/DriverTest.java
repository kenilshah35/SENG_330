/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.uvic.seng330.ex4;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class AppTest {

    private Logger log;
    private ArrayList<Observation> sortedTimeObs;
    private Observation search1;
    private int correctSearchIndex1;
    private Observation search2;
    private int correctSearchIndex2;

    @BeforeAll
    public void init() {
        log = new Logger();
        // Reporter Will Hold the observers Name and contact
        Reporter reporter1 = new Reporter("Bob", "bob@work.com");
        Reporter reporter2 = new Reporter("Sally", "sally@work.com");

        // Array List to hold all the observed whales
        ArrayList<Whale> whaleList = new ArrayList<>();

        // Whale will hold the observed whales species and a description
        whaleList.add(
                new Whale(Whale.WhaleSpecies.SPERM_WHALE, "Young Male with injury to right fin"));
        whaleList.add(new Whale(Whale.WhaleSpecies.RIGHT_WHALE, "Female possibly pregnant"));
        whaleList.add(
                new Whale(Whale.WhaleSpecies.BLUE_WHALE, "Older Female whale accompanied by calf"));
        whaleList.add(new Whale(Whale.WhaleSpecies.BLUE_WHALE, "male calf with mother"));

        // Sighting Platform will hold the data of what means the observer used to observed the
        // whale.
        SightingPlatform platform1 =
                new SightingPlatform(SightingPlatform.SightingPlatformType.HELICOPTER);

        Observation ob1 =
                new Observation(
                        48.1,
                        124.2,
                        platform1,
                        new Date(2020, 12, 05),
                        Cardinal.NORTH,
                        whaleList,
                        25,
                        reporter1,
                        "observation1");
        Observation ob2 =
                new Observation(
                        50.2,
                        60.6,
                        platform1,
                        new Date(2019, 11, 03),
                        Cardinal.EAST,
                        whaleList,
                        25,
                        reporter1,
                        "observation2");
        Observation ob3 =
                new Observation(
                        80.3,
                        90.2,
                        platform1,
                        new Date(2020, 5, 04),
                        Cardinal.WEST,
                        whaleList,
                        25,
                        reporter2,
                        "observation3");

        // store all data of observation into logger class
        log.addObservation(ob1);
        log.addObservation(ob2);
        log.addObservation(ob3);

        search1 = ob2;
        search2 = ob3;

        correctSearchIndex1 = 0;
        correctSearchIndex2 = 1;

        sortedTimeObs = new ArrayList<>();
        sortedTimeObs.add(ob2);
        sortedTimeObs.add(ob3);
        sortedTimeObs.add(ob1);
    }

    @Test
    public void sortWorks() {
        SortObservation obs = new SortObservation(log.getObservationLog());
        obs.byTime();
        ArrayList<Observation> observations = obs.getList();
        assertArrayEquals(
                observations.toArray(),
                sortedTimeObs.toArray(),
                "array is incorrectly sorted by time");
    }

    @Test
    public void searchWorks() {
        SearchObservation obs = new SearchObservation(log.getObservationLog());
        int index = obs.byTime(search1);
        assertEquals(correctSearchIndex1, index, "search returns incorrect index");
    }

    @Test
    public void multipleStrategies() {
        SearchObservation obs = new SearchObservation(log.getObservationLog());
        int index = obs.byCustom(search2, new Observation.ReporterComparator());
        assertEquals(2, index, "search strat 2 returns incorrect index");
        index = obs.byCustom(search1, new Observation.TimestampComparator());
        assertEquals(correctSearchIndex1, index, "search strat 1 returns incorrect index");
    }

    @Test
    public void emptyList() {
        ArrayList<Observation> observations = new ArrayList<>();
        SearchObservation obs = new SearchObservation(observations);
        int index = obs.byTime(search2);
        assertEquals(-1, index, "doesnt handle empty list");
    }

    @Test
    public void nullSearch() {
        SearchObservation obs = new SearchObservation(log.getObservationLog());
        int index = obs.byTime(null);
        assertEquals(-1, index, "doesnt handle null entry");
    }
}
