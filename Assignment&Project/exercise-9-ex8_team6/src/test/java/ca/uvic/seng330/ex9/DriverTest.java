/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.uvic.seng330.ex9;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

class DriverTest {
    List<ObservedWhale> obs;
    List<ObservedWhale> sortedObsList;

    @BeforeEach
    void init() throws IOException {
        obs = new CsvParser<>(ObservedWhale.class, "observations.csv").parseToList();
        sortedObsList = new CsvParser<>(ObservedWhale.class, "sortedObservation.csv").parseToList();
    }

    @Test
    void findHeavierWorks(){
        ObservedWhale heavierWhale = SortWhales.findHeavierWhale(obs.get(0),obs.get(1));
        Assertions.assertEquals(2900,  heavierWhale.getWeight());
    }

    @Test
    public void testHeaviest(){
        Optional<ObservedWhale> heaviest = obs.stream().reduce(SortWhales::findHeavierWhale);

        Assertions.assertTrue(heaviest.isPresent());
        Assertions.assertSame(obs.get(8), heaviest.get());
    }

    @Test
    void sortWorks(){
        SortWhales whalesSort = new SortWhales(obs);
        whalesSort.byWeight();
        for(int i=0;i<sortedObsList.size();i++){
            Assertions.assertEquals(sortedObsList.get(i).getWeight(), whalesSort.getList().get(i).getWeight());
            Assertions.assertEquals(sortedObsList.get(i).getTime(), whalesSort.getList().get(i).getTime());
            Assertions.assertEquals(sortedObsList.get(i).getGridref(), whalesSort.getList().get(i).getGridref());
        }
    }

    @Test
    public void averageWeight(){
        Assertions.assertEquals(39556, obs.stream().mapToDouble(ObservedWhale::getWeight).map(i -> i * 2.2).average().getAsDouble(), 1);
    }


    @Test
    void testCountBefore(){
        CountWhales count = new CountWhales(obs);
        Assertions.assertEquals(4, count.beforeDate(LocalDate.of(2007, 6, 1)));
    }

    @Test
    void removeIfPredicateAnonymousClass(){
        Predicate<ObservedWhale> orcaFilter = new Predicate<ObservedWhale>() {
            @Override
            public boolean test(ObservedWhale observation) {
                return (!observation.getSpecies().equalsIgnoreCase("orca"));
            }
        };
        obs.removeIf(orcaFilter);
        obs.forEach(o -> Assertions.assertTrue(o.getSpecies().equalsIgnoreCase("orca")));
    }

    @Test
    void removeIfLambdaExpression(){
        obs.removeIf((o) -> (!o.getSpecies().equalsIgnoreCase("orca")));
        obs.forEach(o -> Assertions.assertTrue(o.getSpecies().equalsIgnoreCase("orca")));
    }

    @Test
    void removeIfMethodReferenceExpression(){
        obs.removeIf(ObservedWhale::orcaTest);
        obs.forEach(o -> Assertions.assertTrue(o.getSpecies().equalsIgnoreCase("orca")));
    }


}
